=pod

=head1 NAME

vim_mode.pl

=head1 DESCRIPTION

An Irssi script to emulate some of the vi(m) features for the Irssi inputline.

=head1 INSTALLATION

Copy into your F<~/.irssi/scripts/> directory and load with
C</SCRIPT LOAD vim_mode.pl>. You may wish to have it autoload in one of the
L<usual ways|https://github.com/shabble/irssi-docs/wiki/Guide#Autorunning_Scripts>.

=head2 DEPENDENCIES

For proper :ex mode support, vim-mode requires the installation of F<uberprompt.pl>
Uberprompt can be downloaded from:

L<https://github.com/shabble/irssi-scripts/raw/master/prompt_info/uberprompt.pl>

and follow the instructions at the top of that file for installation.

If you don't need Ex-mode, you can run vim_mode.pl without the
uberprompt.pl script, but it is strongly recommended that you use it.

=head3 Irssi requirements

0.8.12 and above should work fine. However the following features are
disabled in irssi < 0.8.13:

=over 4

=item * C<j> C<k> (only with count, they work fine without count in older versions)

=item * C<gg>, C<G>

=back

It is intended to work with at Irssi  0.8.12 and later versions. However some
features are disabled in older versions (see below for details).

Perl >= 5.8.1 is recommended for UTF-8 support (which can be disabled if
necessary).  Please report bugs in older versions as well, we'll try to fix
them.  Later versions of Perl are also faster, which is probably beneficial
to a script of this size and complexity.

=head2 SETUP

Vim Mode provides certain feedback to the user, such as the currently active
mode (command, insert, ex), and if switching buffers, which buffer(s) currently
match the search terms.

There are two ways to go about displaying this information, as described in
the following sections:

=head3 Statusbar Items

Run the following command to add a statusbar item that shows which mode
you're in.

C</statusbar window add vim_mode>

And the following to let C<:b [str]> display a list of channels matching your
search string.

C</statusbar window add vim_windows>

B<Note:> Remember to C</save> after adding these statusbar items to make them
permanent.

B<Note:> If you would rather have these statusbar items on your prompt
line rather than thte window statusbar, please follow these steps.

For technical reasons, I<uberprompt> must occasionally call C</statusbar prompt
reset>, which will remove or deactivate any manually added items on the prompt
statusbar.  To get around this, uberprompt provides two command hooks,
C<uberprompt_load_hook> and C<uberprompt_unload_hook>.  Both of these settings
can contain one (or more, using C</EVAL>) commands to be executed when the prompt
is enabled and disabled, respectively.

See the L<uberprompt documentation|https://github.com/shabble/irssi-scripts/blob/master/prompt_info/README.pod> for further details.

For I<right-aligned> items (that is, after the input field:

=over 4

=item 1 C</alias vm_add /^statusbar prompt add -after input -alignment right vim_mode>

=item 2 C</alias vm_del /^statusbar prompt remove vim_mode>

=item 3 C</set uberprompt_load_hook /^vm_add>

=item 4 C</set uberprompt_unload_hook /^vm_del>

=back

For I<left-aligned> items (before the prompt):

=over 4

=item 1 C</alias vm_add /^statusbar prompt add -before prompt -alignment left vim_mode>

=item 2 C</alias vm_del /^statusbar prompt remove vim_mode>

=item 3 C</set uberprompt_load_hook /^vm_add>

=item 4 C</set uberprompt_unload_hook /^vm_del>

=back

If you wish to add both C<vim_mode> and C<vim_windows> items, replace steps 1 and 2
above with the following (right-aligned):

=over 4

=item 1 C</alias vm_add /^eval /^statusbar prompt add -after input -alightment right vim_mode ; /^statusbar prompt add -after input -alignment right vim_windows>

=item 2 C</alias vm_del /^eval /^statusbar prompt remove vim_mode ; /^statusbar prompt remove vim_windows>

=back

and then complete stages 3 and 4 as above.  Replace the C<-after> and C<-alignment>
to suit your location preferences.

B<Note:> It is also possible to place the items between the prompt and input field,
by specifying C<-after prompt> or C<-before input> as appropriate.

=head3 Expando Variables

Vim mode augments the existing Irssi expando (automatic variables) with two
additional ones: C<$vim_cmd_mode> and C<$vim_wins>.

C<$vim_cmd_mode> is the equivalent of the C<vim_mode> statusbar item, and
C<$vim_wins> is the counterpart of C<vim_windows>.

They can be added to your theme, or inserted into your uberprompt using
a command such as:

"C</set uberprompt_format [$vim_cmd_mode] $*$uber] >"

=head3 Quick Window Switching

If you are in the habit of using C<Esc,N> for switching windows, you might
want to consider switching to using C<Alt+N>. This is faster, anyway, but it
will be even faster for you while you're using F<vim_mode.pl>. Also, if you
don't already know, you can use C<Alt+[qwertyuio]> to access windows 11-19
(the letter corresponds to the number northwest of it on the keyboard).

Also, for xterm users, the default binding is to emit a skimpy set of
non-ASCII chars, such as superscript-2 when you hit C<Alt+2>. There are more
modern ways to input such characters, and they get in the way of the above
trick. Doing:

    echo '*VT100*metaSendsEscape: true' >> ~/.Xresources
    xrdb -merge ~/.Xresources
    
...then restart xterm. The C<xrdb> command should only be necessary for the
current X session, as that file is read by default in most X startup scripts.
If it is not, you can add that line to your C<~/.xsession> or C<~/.xinitrc>,
whichever is in use. Furthermore, if you want to change this setting on a
running xterm (for example, because you're running C<irssi> directly, not from
within C<screen> even though you should!), you can use C<editres>. It is one
of those crufty old X11 applications that is not very well understood, today,
but to use it you go to C<Commands E<gt> Get Tree>, then click on the xterm,
then click on the C<vt100> box, then go to C<Commands E<gt> Show Resource
Box>. From there the C<metaSendsEscape> resource should be visible so you can
click on it (if it isn't, fiddle with the odd scrollbar on the left of the
window). Finally, enter C<true> in the "Enter Resource Value" box and hit
C<Apply>.  Not terribly simple, but at least it will save you the noob move of
C</quit BRB.>

=head3 FILE-BASED CONFIGURATION

Additionally to the irssi settings described in L<settings|/SETTINGS>, vim_mode
can be configured through an external configuration file named "vim_moderc"
located in F<~/.irssi/vim_moderc>. If available it's loaded on startup and every
supported ex-command is run. Its syntax is similar to "vimrc". To (re)load it
while vim_mode is running use C<:so[urce]>.

Currently Supported ex-commands:

=over 4

=item * C<:map>

=back

=head1 USAGE

The following section is divided into the different modes as supported by Vim itself:

=head2 COMMAND MODE

It supports most commonly used command mode features:

=over 2

=item * Insert/Command mode.

C<Esc> and C<Ctrl-C> enter command mode.  C</set vim_mode_cmd_seq j> allows
to use C<jj> as Escape (any other character can be used as well).

=item * Cursor motion:

C<h l 0 ^ $ E<lt>SpaceE<gt> E<lt>BSE<gt> f t F T>

=item * History motion:

C<j k gg G> C<gg> moves to the oldest (first) history line.  C<G> without a
count moves to the current input line, with a count it goes to the I<count-th>
history line (1 is the oldest).

=item * Cursor word motion:

C<w b ge e W gE B E>

=item * Word objects (only the following work yet):

C<aw aW>

=item * Yank and paste:

 C<y p P>

=item * Change and delete:

C<c d>

=item * Delete at cursor:

C<x X>

=item * Replace at cursor:

C<r>

=item * Insert mode:

C<i a I A>

=item * Switch case:

C<~>

=item * Repeat change:

C<.>

=item * Repeat

C<ftFT: ; ,>

=item * Registers:

C<"a-"z "" "0 "* "+ "_> (black hole)

=item * Line-wise shortcuts:

C<dd cc yy>

=item * Shortcuts:

C<s S C D>

=item * Scroll the scrollback buffer:

C<Ctrl-E Ctrl-D Ctrl-Y Ctrl-U Ctrl-F Ctrl-B>

=item * Switch to last active window:

C<Ctrl-6/Ctrl-^>

=item * Switch split windows:

<Ctrl-W j Ctrl-W k>

=item * Undo/Redo:

C<u Ctrl-R>

=back

Counts and combinations work as well, e.g. C<d5fx> or C<3iabcE<lt>escE<gt>>. Counts also work with mapped ex-commands (see below), e.g. if you map C<gb> to do C<:bn>, then C<2gb> will switch to the second next buffer.  Repeat also supports counts.

=head3 REGISTERS

=over 4

=item * Appending to register with C<"A-"Z>

=item * C<""> is the default yank/delete register.

=item * C<"0> contains the last yank (if no register was specified).

=item * The special registers C<"* "+> both contain irssi's internal cut-buffer.

=back

=head2 INSERT MODE

The following insert mode mappings are supported:

=over 4

=item * Insert register content: Ctrl-R x (where x is the register to insert)

=back

=head2 EX-MODE

Ex-mode (activated by C<:> in command mode) supports the following commands:

=over 4

=item * Command History:

C<E<lt>uparrowE<gt>> - cycle backwards through history

C<E<lt>downarrowE<gt>> - cycle forwards through history

C<:eh> - show ex history

=item * Switching buffers:

C<:[N]b [N]> - switch to channel number

C<:b#>       - switch to last channel

C<:b> E<lt>partial-channel-nameE<gt>

C<:b> <partial-server>/<partial-channel>

C<:buffer {args}> (same as C<:b>)

C<:[N]bn[ext] [N]> - switch to next window

C<:[N]bp[rev] [N]> - switch to previous window

=item * Close window:

C<:[N]bd[elete] [N]>

=item * Display windows:

C<:ls>, C<:buffers>

=item * Display registers:

C<:reg[isters] {args}>, C<:di[splay] {args}>

=item * Display undolist:

C<:undol[ist]> (mostly used for debugging)

=item * Source files:

C<:so[urce]> - only sources vim_moderc at the moment,
                         F<{file}> not supported

=item * Mappings:

C<:map> - display custom mappings

=item * Saving mappings:

C<:mkv[imrc][!]> - like in Vim, but [file] not supported

=item * Substitution:

C<:s///> - I<i> and I<g> are supported as flags, only C<///> can be used as
eparator, and it uses Perl regex syntax instead of Vim syntax.

=item * Settings:

C<:se[t]> - display all options

C<:se[t] {option}>         - display all matching options

C<:se[t] {option} {value}> - change option to value

=back

=head3 MAPPINGS

=head4 Commands

=over 4

=item * C<:map {lhs}>       - display mappings starting with {lhs}

=item * C<:map {lhs} {rhs}> - add mapping

=item * C<:unm[ap] {lhs}>   - remove custom mapping

=back

=head4 Parameters

I<{lhs}> is the key combination to be mapped, I<{rhs}> the target. The
C<E<lt>E<gt>> notation is used

(e.g. C<E<lt>C-FE<gt>> is I<Ctrl-F>), case is ignored.
 Supported C<E<lt>E<gt>> keys are:

=over 4

=item * C<E<lt>C-AE<gt>> - C<E<lt>C-ZE<gt>>,

=item * C<E<lt>C-^E<gt>>, C<E<lt>C-6E<gt>>

=item * C<E<lt>SpaceE<gt>>

=item * C<E<lt>CRE<gt>> - Enter

=item * C<E<lt>BSE<gt>> - Backspace

=item * C<E<lt>NopE<gt>> - No-op (Do Nothing).

=back

Mapping ex-mode and irssi commands is supported. When mapping ex-mode commands
the trailing C<E<lt>CrE<gt>> is not necessary. Only default mappings can be used
in I<{rhs}>.

Examples:

=over 4

=item * C<:map w  W>      - to remap w to work like W

=item * C<:map gb :bnext> - to map gb to call :bnext

=item * C<:map gB :bprev>

=item * C<:map g1 :b 1>   - to map g1 to switch to buffer 1

=item * C<:map gb :b>     - to map gb to :b, 1gb switches to buffer 1, 5gb to 5

=item * C<:map E<lt>C-LE<gt> /clear> - map Ctrl-L to irssi command /clear

=item * C<:map E<lt>C-GE<gt> /window goto 1>

=item * C<:map E<lt>C-EE<gt> <Nop>> - disable E<lt>C-EE<gt>, it does nothing now

=item * C<:unmap E<lt>C-EE<gt>> - restore default behavior of C<E<lt>C-EE<gt>>
after disabling it

=back

Note that you must use C</> for irssi commands (like C</clear>), the current value
of Irssi's cmdchars does B<not> work! This is necessary do differentiate between
ex-commands and irssi commands.

=head2 SETTINGS

The settings are stored as irssi settings and can be set using C</set> as usual
(prepend C<vim_mode_> to setting name) or using the C<:set> ex-command. The
following settings are available:

=over 4

=item * utf8 - Support UTF-8 characters, boolean, default on

=item * debug - Enable debug output, boolean, default off

=item * cmd_seq - Char that when double-pressed simulates C<E<lt>EscE<gt>>, string, default '' (disabled)

=item * start_cmd - Start every line in command mode, boolean, default off

=item * max_undo_lines - Sze of the undo buffer. Integer, default 50 items.

=item * ex_history_size - Number of items stored in the ex-mode history. Integer, default 100.

=item * prompt_leading_space - Ddetermines whether ex mode prepends a space to the displayed input. Boolean, default on

=back

In contrast to irssi's settings, C<:set> accepts 0 and 1 as values for boolean
settings, but only vim_mode's settings can be set/displayed.

Examples:

   :set cmd_seq=j   # set cmd_seq to j
   :set cmd_seq=    # disable cmd_seq
   :set debug=on    # enable debug
   :set debug=off   # disable debug

=head1 SUPPORT

Any behavior different from Vim (unless explicitly documented) should be
considered a bug and reported.

B<NOTE:> This script is still under heavy development, and there may be bugs.
Please submit reproducible sequences to the bug-tracker at:
L<http://github.com/shabble/irssi-scripts/issues/new>

or contact rudi_s or shabble on irc.freenode.net (#irssi and #irssi_vim)

=head1 AUTHORS

Copyright E<copy> 2010-2011 Tom Feist C<E<lt>shabble+irssi@metavore.orgE<gt>> and

Copyright E<copy> 2010-2011 Simon Ruderich C<E<lt>simon@ruderich.orgE<gt>>

=head1 THANKS

Particular thanks go to

=over 4

=item * estragib: a lot of testing and many bug reports and feature requests

=item * iaj: testing

=item * tmr: explaining how various bits of vim work

=back

as well as the rest of C<#irssi> and C<#irssi_vim> on Freenode IRC.

=head1 LICENCE

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

=head1 BUGS

=over 4

=item *

count before register doesn't work: e.g. 3"ap doesn't work, but "a3p does

=item *

mapping an incomplete ex-command doesn't open the ex-mode with the partial
command (e.g. C<:map gb :b> causes an error instead of opening the ex-mode and
displaying C<:bE<lt>cursorE<gt>>)

=item *

 undo/redo cursor positions are mostly wrong

=back

=head1 TODO

=over 4

=item *

History:

=over 4

=item *

 C< * /,?,n,N> to search through history (like rl_history_search.pl)

=back

=item *

Window switching (C<:b>)

=over 4

=item *

Tab completion of window(-item) names

=item *

non-sequential matches(?)

=back

=back

See also the TODO file at
L<github|https://github.com/shabble/irssi-scripts/blob/master/vim-mode/TODO> for
many many more things.

=head2 WONTFIX

Things we're not ever likely to do:

=over 4

=item * Macros

=back



=cut

